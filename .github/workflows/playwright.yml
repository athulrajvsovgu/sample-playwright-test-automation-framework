name: Playwright Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    #container:
      #image: mcr.microsoft.com/playwright:v1.52.0-focal

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.17.0'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          npm install

      - name: Run Playwright tests
        run: |
          mkdir -p artifacts/tests/html
          chmod -R 777 artifacts/
          export PLAYWRIGHT_HTML_REPORT=artifacts/tests/html
          export PLAYWRIGHT_JUNIT_OUTPUT_NAME=artifacts/tests/junit-test-results.xml
          npx playwright test tests/example.spec.ts

      - name: Upload HTML report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: artifacts/tests/html
          retention-days: 7

      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          junit_files: artifacts/tests/junit-test-results.xml

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.17.0'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          npm install

      - name: Run tests with coverage
        run: npx ng test --watch=false --code-coverage

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
